// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"fmt"
	"log"
	"os"

	loads "github.com/go-openapi/loads"
	flag "github.com/spf13/pflag"

	"gitlab.com/amimof/multikube/api/v1/server"
	"gitlab.com/amimof/multikube/api/v1/server/restapi"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

var (
	configPath string
)

func main() {

	swaggerSpec, err := loads.Embedded(server.SwaggerJSON, server.FlatSwaggerJSON)
	if err != nil {
		log.Fatalln(err)
	}

	var s *server.Server // make sure init is called

	flag.Usage = func() {
		fmt.Fprint(os.Stderr, "Usage:\n")
		fmt.Fprint(os.Stderr, "  multikube-server [OPTIONS]\n\n")

		title := "Kubernetes multi-cluster manager"
		fmt.Fprint(os.Stderr, title+"\n\n")
		desc := "Manages multiple Kubernetes clusters and provides a single API to clients"
		if desc != "" {
			fmt.Fprintf(os.Stderr, desc+"\n\n")
		}
		fmt.Fprintln(os.Stderr, flag.CommandLine.FlagUsages())
	}

	// Add our flags here
	flag.StringVar(&configPath, "config", "/etc/multikube/multikube.yml", "Path to multikube configuration")

	// parse the CLI flags
	flag.Parse()

	api := restapi.NewMultikubeAPI(swaggerSpec)
	// get server with flag values filled out
	s = server.NewServer(api)

	defer s.Shutdown()

	s.ConfigureAPI()
	if err := s.Serve(); err != nil {
		log.Fatalln(err)
	}

}
